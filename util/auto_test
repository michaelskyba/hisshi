#!/usr/bin/env python3
import os
import sys
import subprocess


def panic(message):
    print(f"ERROR: {message}", file=sys.stderr)
    sys.exit(1)


def parse_expected(text):
    """
    Given an expected output string from the config file,
    convert literal "\t" and "\n" into actual tab and newline characters.
    """
    return text.replace("\\t", "\t").replace("\\n", "\n")


def main():
    tests_dir = "./tests"
    config_path = os.path.join(tests_dir, "config.txt")

    if not os.path.isdir(tests_dir):
        panic(f"Directory {tests_dir} does not exist.")

    if not os.path.isfile(config_path):
        panic(f"Config file {config_path} does not exist.")

    try:
        with open(config_path, "r") as f:
            lines = f.readlines()
    except Exception as e:
        panic(f"Failed to read {config_path}: {e}")

    # Process non-comment lines.
    # Each valid line is expected to have either 2 or 3 columns separated by tabs:
    #   column 1: filename (for hsh command)
    #   column 2: expected stdout (escape sequences processed)
    #   column 3 (optional): expected stderr (escape sequences processed); if omitted, we expect stderr to be blank.
    tests = []
    for line in lines:
        line = line.rstrip("\n")
        if not line.strip():
            continue  # skip blank lines
        if line.lstrip().startswith("#"):
            continue  # skip comments

        # Split by tabs (literal tabs are not allowed in the content).
        parts = line.split("\t")
        if len(parts) < 2:
            print(
                f"Warning: skipping invalid line (not enough columns): {line}",
                file=sys.stderr,
            )
            continue

        filename = parts[0].strip()
        expected_stdout = parse_expected(parts[1])
        if len(parts) >= 3:
            expected_stderr = parse_expected(parts[2])
        else:
            expected_stderr = ""  # expect nothing on stderr

        tests.append((filename, expected_stdout, expected_stderr))

    total_tests = len(tests)
    if total_tests == 0:
        print("No tests to run.")
        sys.exit(0)

    passed = 0
    failed = 0

    for idx, (test_name, expected_stdout, expected_stderr) in enumerate(tests, start=1):
        command = ["hsh", test_name]
        try:
            result = subprocess.run(
                command,
                cwd=tests_dir,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                timeout=10,  # seconds
            )
        except Exception as e:
            print(f"({idx}/{total_tests}) {test_name}: FAIL")
            print(f"Error running command: {e}")
            failed += 1
            continue

        actual_stdout = result.stdout
        actual_stderr = result.stderr

        stdout_match = actual_stdout == expected_stdout
        stderr_match = actual_stderr == expected_stderr

        if stdout_match and stderr_match:
            print(f"({idx}/{total_tests}) {test_name}: OK")
            passed += 1
        else:
            print(f"({idx}/{total_tests}) {test_name}: FAIL")
            if not stdout_match:
                print("Stdout mismatch:")
                print("Expected:")
                print(repr(expected_stdout))
                print("Got:")
                print(repr(actual_stdout))
            if not stderr_match:
                print("Stderr mismatch:")
                print("Expected:")
                print(repr(expected_stderr))
                print("Got:")
                print(repr(actual_stderr))
            failed += 1

    print(f"\n{passed} PASSED, {failed} FAILED")


if __name__ == "__main__":
    main()
